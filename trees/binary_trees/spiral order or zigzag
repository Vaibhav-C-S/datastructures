Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []




# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def zigzagLevelOrder(self,root):
        if not root:
            return []

        s1 = [root]
        s2 = []
        ans = []
        temp = []

        while len(s1) != 0 or len(s2) != 0:
            while len(s1) != 0:
                temp_node = s1.pop()
                temp.append(temp_node.val)

                if temp_node.left:
                    s2.append(temp_node.left)
                if temp_node.right:
                    s2.append(temp_node.right)

            if len(temp) > 0:
                ans.append(temp)
                temp = []

            while len(s2) != 0:
                temp_node = s2.pop()
                temp.append(temp_node.val)

                if temp_node.right:
                    s1.append(temp_node.right)
                if temp_node.left:
                    s1.append(temp_node.left)

            if len(temp) > 0:
                ans.append(temp)
                temp = []

        return ans
        
