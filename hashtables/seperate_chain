class Node:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.next = None

class Hashmap:
    def __init__(self, capacity):
        self.capacity = capacity
        self.bucket = [None] * self.capacity

    def hashfunction(self, key):
        return key % self.capacity

    def put(self, key, value):
        index = self.hashfunction(key)
        if self.bucket[index] is None:
            self.bucket[index] = Node(key, value)
        else:
            temp = self.bucket[index]
            while temp is not None:
                if temp.key == key:
                    temp.value = value
                    return
                temp = temp.next
            temp.next = Node(key, value)

    def get(self, key):
        index = self.hashfunction(key)
        if self.bucket[index] is None:
            return None
        else:
            temp = self.bucket[index]
            while temp is not None:
                if temp.key == key:
                    return temp.value
                temp = temp.next
            return None

    def delete(self, key):
        index = self.hashfunction(key)
        if self.bucket[index] is None:
            return

        if self.bucket[index].key == key:
            self.bucket[index] = self.bucket[index].next
            return

        current = self.bucket[index]
        while current.next is not None:
            if current.next.key == key:
                current.next = current.next.next
                return
            current = current.next

    def display(self):
        for index, bucket in enumerate(self.bucket):
            temp = bucket
            print(f" {index} : ", end="[")
            while temp is not None:
                print(f"[{temp.key}, {temp.value}]", end=" ")
                temp = temp.next
            print(end="]\n")

if __name__ == "__main__":
    hashmap = Hashmap(10)
    hashmap.put(22, "charlie")
    hashmap.put(22, "vaibhav")
    hashmap.delete(33)
    hashmap.display()
