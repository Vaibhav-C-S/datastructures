class Node:
    def __init__(self, val):
        self.value = val
        self.left = None
        self.right = None
        self.svalue = 0


class LeftistHeap:
    def __init__(self):
        self.root = None

    def sval(self, root):
        if root is None:
            return 0
        return min(self.sval(root.left), self.sval(root.right)) + 1

    def merge(self, root1, root2):
        if root1 is None:
            return root2
        if root2 is None:
            return root1
        returned_heap = LeftistHeap()
        if root1.value < root2.value:
            returned_heap.root = self.merge(root1.right, root2)
            finalroot = root1
        else:
            returned_heap.root = self.merge(root1, root2.right)
            finalroot = root2

        returned_heap_svalue = self.sval(returned_heap.root)
        if finalroot.left is not None:
            finalroot.left.svalue = self.sval(finalroot.left)
        if returned_heap_svalue > finalroot.svalue:
            temp = finalroot.left
            finalroot.left = returned_heap.root
            finalroot.right = temp
        else:
            finalroot.right = returned_heap.root

        return finalroot

    def delete_min(self):
        if self.root is None:
            return None

        minimum = self.root.value
        self.root = self.merge(self.root.left, self.root.right)
        return minimum

    def insert(self, value):
        new_node = Node(value)
        self.root = self.merge(self.root, new_node)

    def print_heap(self):
        self._print_inorder(self.root)

    def _print_inorder(self, node):
        if node is None:
            return

        self._print_inorder(node.left)
        print(node.value, end=' ')
        self._print_inorder(node.right)

h = LeftistHeap()
h.insert(2)
h.insert(3)
temp=0
while temp is not None:

    temp = h.delete_min()
    if temp is not None:
        print(temp)
        
links to understand----------------------
1---https://youtu.be/dgMuWmm-aVA
2---https://youtu.be/zJ2yyRfIkXo
3--https://youtu.be/UqvGHUNd9Uw
